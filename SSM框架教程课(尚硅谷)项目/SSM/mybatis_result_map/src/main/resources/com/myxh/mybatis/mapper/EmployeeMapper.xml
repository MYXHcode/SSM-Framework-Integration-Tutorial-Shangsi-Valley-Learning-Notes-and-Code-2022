<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.myxh.mybatis.mapper.EmployeeMapper">
    <!--
    字段名和属性名不一致的情况，如何处理映射关系
    1、为查询的字段设置别名，和属性名保持一致
    2、当字段符合 MySQL 的要求使用下划线命名风格，而属性符合 Java 的要求使用驼峰命名风格
    此时可以在 MyBatis 的核心配置文件中设置一个全局配置，可以自动将下划线命名风格映射为驼峰命名风格
    employee_id -> employeeId, employee_name -> employeeName
    3、使用 resultMap 自定义映射处理

    处理多对一的映射关系：
    1、级联方式处理
    2、association
    3、分步查询

    处理一对多的映射关系
    1、collection
    2、分步查询
     -->

    <!--
    resultMap：设置自定义的映射关系
    id：唯一标识
    type：处理映射关系的实体类的类型
    常用的标签：
    id：处理主键和实体类中属性的映射关系
    result：处理普通字段和实体类中属性的映射关系
    association：处理多对一的映射关系（处理实体类类型的属性）
    collection：处理一对多的映射关系（处理集合类型的属性）
    column：设置映射关系中的字段名，必须是 SQL 查询出的某个字段
    property：设置映射关系中的属性的属性名，必须是处理的实体类类型中的属性名
     -->
    <resultMap id="EmployeeResultMap" type="Employee">
        <id column="employee_id" property="employeeId"/>
        <result column="employee_name" property="employeeName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
    </resultMap>

    <!-- Employee getEmployeeByEmployeeId(@Param("employeeId") Integer employeeId); -->
    <!--
    <select id="getEmployeeByEmployeeId" resultType="Employee">
        select employee_id as employeeId, employee_name as employeeName, age, gender, email from t_employee
        where employee_id = #{employeeId};
    </select>
     -->
    <!--
    <select id="getEmployeeByEmployeeId" resultType="Employee">
        select * from t_employee where employee_id = #{employeeId};
    </select>
     -->
    <select id="getEmployeeByEmployeeId" resultMap="EmployeeResultMap">
        select * from t_employee where employee_id = #{employeeId};
    </select>

    <!--
    <resultMap id="EmployeeAndDepartmentResultMap" type="Employee">
        <id column="employee_id" property="employeeId"></id>
        <result column="employee_name" property="employeeName"></result>
        <result column="age" property="age"></result>
        <result column="gender" property="gender"></result>
        <result column="employee_email" property="email"></result>
        <result column="department_id" property="department.departmentId"></result>
        <result column="department_name" property="department.departmentName"></result>
        <result column="department_email" property="department.email"></result>
    </resultMap>
     -->
    <resultMap id="EmployeeAndDepartmentResultMap" type="Employee">
        <id column="employee_id" property="employeeId"/>
        <result column="employee_name" property="employeeName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <result column="employee_email" property="email"/>
        <!--
        association：处理多对一的映射关系（处理实体类类型的属性）
        property：设置需要处理映射关系的属性的属性名
        javaType：设置要处理的属性的类型
         -->
        <association property="department" javaType="Department">
            <id column="department_id" property="departmentId"/>
            <result column="department_name" property="departmentName"/>
            <result column="department_email" property="email"/>
        </association>
    </resultMap>

    <!-- Employee getEmployeeAndDepartmentByEmployeeId(@Param("employeeId") Integer employeeId); -->
    <select id="getEmployeeAndDepartmentByEmployeeId" resultMap="EmployeeAndDepartmentResultMap">
        select
        t_e.employee_id,
        t_e.employee_name,
        t_e.age,
        t_e.gender,
        t_e.email as employee_email,
        t_d.department_id,
        t_d.department_name,
        t_d.email as department_email
        from t_employee as t_e
        left join t_department as t_d
        on t_e.department_id = t_d.department_id
        where t_e.employee_id = #{employeeId};
    </select>

    <resultMap id="EmployeeAndDepartmentByStepResultMap" type="Employee">
        <id column="employee_id" property="employeeId"/>
        <result column="employee_name" property="employeeName"/>
        <result column="age" property="age"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--
        property：设置需要处理映射关系的属性的属性名
        fetchType：在开启了延迟加载的环境中，通过该属性设置当前的分步查询是否使用延迟加
        fetchType="eager（立即加裁） | lazy（延迟加载）
        select：设置分步查询的 SQL 的唯一标识
        column：将查询出的某个字段作为分步查询的 SQL 的条件
         -->
        <association property="department" fetchType="eager"
                     select="com.myxh.mybatis.mapper.DepartmentMapper.getEmployeeAndDepartmentByStepTwo"
                     column="department_id">
        </association>
    </resultMap>

    <!-- Employee getEmployeeAndDepartmentByStepOne(@Param("employeeId") Integer employeeId); -->
    <select id="getEmployeeAndDepartmentByStepOne" resultMap="EmployeeAndDepartmentByStepResultMap">
        select * from t_employee where employee_id = #{employeeId};
    </select>

    <!-- List<Employee> getDepartmentAndEmployeeByStepTwo(@Param("departmentId") Integer departmentId); -->
    <select id="getDepartmentAndEmployeeByStepTwo" resultType="Employee">
        select * from t_employee where department_id = #{departmentId};
    </select>
</mapper>
